// Node Class: Building Block of DLL
class Node:
    def __init__(self, prev=None, item=None, next=None):
        self.prev = prev      //# Pointer to the previous node
        self.item = item      //# Data the node holds
        self.next = next      //# Pointer to the next node
 // DLL Class: Doubly Linked List Operations

class DLL:
    def __init__(self, start=None):
        self.start = start //# Points to the first node of the list (head)

  // DLL Class: Doubly Linked List Operations

class DLL:
    def __init__(self, start=None):
        self.start = start  //# Points to the first node of the list (head)

// insert_at_start(data) – Insert node at the beginning
 def insert_at_start(self, data):
    n = Node(None, data, self.start)


     if not self.is_empty():
        self.start.prev = n  # Old start's prev points to new node

     self.start = n  //# Update start to the new node

    // insert_at_last(data) – Insert node at the end

def insert_at_last(self, data):
    temp = self.start  //Start from the head of the list.

          if self.start != None:
        while temp.next != None:
            temp = temp.next  //# Move to the last 

        n = Node(temp, data, None)


 // search(data) – Search for a node by value    
def search(self, data):
    temp = self.start
    while temp is not None:
        if temp.item == data:
            return temp  # Node with matching data found
        temp = temp.next
    return None  //# Not found




